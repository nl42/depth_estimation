<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<title>YALMIP - Command reference</title>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251">
<meta content="Microsoft FrontPage 6.0" name="GENERATOR">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link href="yalmip.css" type="text/css" rel="stylesheet">
<base target="_self">
</head>

<body>

<div align="left">
  <table border="0" cellpadding="4" cellspacing="3" style="border-collapse: collapse" width="100%" align="left">
    <tr>
      <td width="100%" align="left" height="100%" valign="top">&nbsp;
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table30">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="assign">ASSIGN</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table31">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>assign(X,Y)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table32">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">Y:</font></p>
                  </td>
                  <td>double</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">assign is used to explicitly assigning the value obtained 
              when applying the command double on an
              <a href="reference.htm#sdpvar">sdpvar</a> object</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Variables are initialized as NaNs<table cellpadding="10" width="100%" id="table33">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(1,1);
double(x)
 <font color="#000000">ans = 
    NaN</font></pre>
                  </td>
                </tr>
              </table>
              <p>By using <a href="reference.htm#assign">assign</a>, this 
              value can be altered </p>
              <table cellpadding="10" width="100%" id="table34">
                <tr>
                  <td class="xmpcode">
                  <pre>assign(x,1)
double(x)
<font color="#000000"> ans = 
    1</font></pre>
                  </td>
                </tr>
              </table>
              <p>By default, inconsistent assignments generate an error message.</p>
              <table cellpadding="10" width="100%" id="table35">
                <tr>
                  <td class="xmpcode">
                  <pre>t = sdpvar(1,1);x = [t t];
assign(x,[1 2])
<font color="#000000">??? Error using ==&gt; sdpvar/assign
Inconsistent assignment</font></pre>
                  </td>
                </tr>
              </table>
              <p>With a third argument, a least squares assignment is obtained</p>
              <table cellpadding="10" width="100%" id="table36">
                <tr>
                  <td class="xmpcode">
                  <pre>t = sdpvar(1,1);x = [t t];
assign(x,[1 2],1)
double(x)

<font color="#000000">ans =

    1.5000    1.5000</font></pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="binary">BINARY</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>c = binary(x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">c:</font></p>
                  </td>
                  <td>sdpvar object (only useful in <a href="reference.htm#lmi">
                  set</a>)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">x:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">binary is used to constrain a variables to be binary.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">
              
              <p>Setting up a binary linear program <b>{min c<sup>T</sup>x 
              subject to Ax&#8804;b}</b> can be done as</p>
              
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = binvar(n,1);
solvesdp(set(A*x&lt;b),c&#39;*x)</pre>
                  </td>
                </tr>
              </table>
              <p>or</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(n,1);
solvesdp(set(A*x&lt;b)+set(binary(x)),c&#39;*x)</pre>
                  </td>
                </tr>
              </table>
              <p>Note, the binary constraint is imposed on the involved variables, 
              not the actual <a href="reference.htm#sdpvar">sdpvar</a> object. Hence, 
              the following two constraints are equivalent </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(binary(x));
F = set(binary(pi+sqrt(2)*x));</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#intvar">intvar</a>,
              <a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#binvar">binvar</a>, <a href="#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="binvar">BINVAR</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>x = binvar(n,m,&#39;field&#39;,&#39;type&#39;)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">n:</font></p>
                  </td>
                  <td>Height</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">m:</font></p>
                  </td>
                  <td>Width</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;field&#39;:</font></p>
                  </td>
                  <td>char {&#39;real&#39;,&#39;complex&#39;}</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;type&#39;:</font></p>
                  </td>
                  <td>char {&#39;symmetric&#39;,&#39;full&#39;,&#39;hermitian&#39;,&#39;toeplitz&#39;,&#39;hankel&#39;,&#39;skew&#39;}</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">binvar is used to define symbolic decision variables 
              with binary elements.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl"><p>A scalar binary variable is defined with</p><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = binvar(1,1)</pre>
                  </td>
                </tr>
              </table>
              <p>For more examples, see <a href="reference.htm#sdpvar">sdpvar</a>.</p>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#intvar">intvar</a>,
              <a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#integer">integer</a>,
              <a href="reference.htm#binary">binary</a>, <a href="#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table53">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="blkvar">BLKVAR</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table54">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>X = blkvar</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table55">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>Container for block matrix</td>
                </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">blkvar is used to handle block matrices in a 
				more symbolic fashion.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Consider the 3x3 block matrix <code>[A B 0;B' C 
				D;0 D' E]</code>. Using standard YALMIP and MATLAB code, we would define this using 
				concatenations. <table cellpadding="10" width="100%" id="table56">
                <tr>
                  <td class="xmpcode">
                  <pre>n = 5;
m = 3;
A = sdpvar(n,n);
B = randn(n,2);
E = sdpvar(m,m);
C = randn(2,2);
D = randn(2,m);</pre>
					<pre>X = [A B zeros(n,m);B' C D;zeros(m,n) D' E];</pre>
                  </td>
                </tr>
              </table>
              <p>By using a block variable, we can define blocks instead. </p>
				<table cellpadding="10" width="100%" id="table57">
                <tr>
                  <td class="xmpcode">
                  <pre>X = blkvar;
X(1,1) = A;
X(1,2) = B;
X(1,3) = 0;
X(2,2) = C;
X(2,3) = D;
X(3,3) = E;
X = sdpvar(X);</pre>
                  </td>
                </tr>
              </table>
              <p>Dimension of 0 blocks do not have to be specified, they will be 
				automatically be derived, if possible, from the dimension of 
				other elements. Note that we only have to define one element of 
				symmetric pairs, YALMIP will automatically fill in the symmetric 
				counter-part. If no symmetric counter-part is found, the 
				corresponding block is filled with zeroes. Hence, the following 
				code is equivalent.</p> 
				<table cellpadding="10" width="100%" id="table58">
                <tr>
                  <td class="xmpcode">
                  <pre>X = blkvar;
X(1,1) = A;
X(1,2) = B;
X(2,2) = C;
X(2,3) = D;
X(3,3) = E;
X = sdpvar(X);</pre>
                  </td>
                </tr>
              </table>
              <p>Standard operators can typically be applied directly to the 
				block variable (but it is currently recommended to convert the 
				variable to an sdpvar object)</p> 
				<table cellpadding="10" width="100%" id="table59">
                <tr>
                  <td class="xmpcode">
                  <pre>X = blkvar;
X(1,1) = A;
X(1,2) = B;
X(2,2) = C;
X(2,3) = D;
X(3,3) = E;
F = set(X &gt; 0 ) + set(trace(X)==1);
% Recommended
X = sdpvar(X);
F = set(X &gt; 0 ) + set(trace(X)==1);</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table44">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="bounds">BOUNDS</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table45">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>bounds(X,lower,upper)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table51">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>sdpvar</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">lower:</font></p>
                  </td>
                  <td>double</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">upper:</font></p>
                  </td>
                  <td>double</td>
                </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl" height="26">bounds is used to add implicit 
				domain bounds on variables to improve big-M relaxations.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Variable bounds defined with the command bounds 
				are used to compute suitable constants when performing big-M 
				relaxations in 
              <a href="logic.htm">logic programming</a> and while creating MILP 
				models for <a href="extoperators.htm#milp">non-convex operators</a>. As an example, the following simple mixed 
				integer logic 
				program requires a big-M relaxation in YALMIP. To improve the 
				relaxation, we supply bounds on the variable <b>x</b>.<table cellpadding="10" width="100%" id="table47">
                <tr>
                  <td class="xmpcode">
                  <pre>A1 = randn(10,3);
b1 = rand(10,1)*10;
A2 = randn(10,3);
b2 = rand(10,1)*10;
x = sdpvar(3,1);bounds(x,[-25;-25;-25],[25;25;25]);
F = set((A1*x&lt;=b1) | (A1*x &lt;=b2));
solvesdp(F,sum(x))</pre>
                  </td>
                </tr>
              </table>
              <p>Of course, standard MATLAB notation applies so if you have the 
				same bound on all variables, you only need to supply one scalar 
				bound.</p><table cellpadding="10" width="100%" id="table52">
                <tr>
                  <td class="xmpcode">
                  <pre>A1 = randn(10,3);
b1 = rand(10,1)*10;
A2 = randn(10,3);
b2 = rand(10,1)*10;
x = sdpvar(3,1);bounds(x,-25,25);
F = set((A1*x&lt;=b1) | (A1*x &lt;=b2));
solvesdp(F,sum(x))</pre>
                  </td>
                </tr>
              </table>
              <p>Note that the big-M computation only take advantage of 
				bounds explicitly defined using the bounds command. Bounds defined using a 
				<a href="reference.htm#set">set</a> construction will not be detected or exploited. Hence, the 
				following problem will give rise to a MILP with weaker relaxations (big-M will be set to e 10<sup>4</sup>).</p>
              <table cellpadding="10" width="100%" id="table49">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(3,1);
F = set(-25 &lt;= x&lt;= 25) + set((A1*x&lt;=b1) | (A1*x &lt;=b2));
solvesdp(F,sum(x))</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="checkset">CHECKSET</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>[p,d] = checkset(F)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">p</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>Primal constraint residuals</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">d</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>Dual constraint residuals</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">checkset is used to examine satisfaction of constraints 
              in a <a href="#set">set</a> object.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl"><p>After solving a problem, we can easily check how 
              well the constraints are satisfied.</p><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F,objective);
checkset(F)</pre>
                  </td>
                </tr>
              </table>
              <p>The constraint residuals are defined as smallest eigenvalue, smallest 
              element, negated largest absolute-value element and largest distance 
              to an integer for semidefinite, element-wise, second order cone and 
              integrality constraints respectively. Hence, a solution is feasible 
              if all residuals related to inequalities are non-negative and residuals 
              related to equalities are sufficiently close to zero.</p>
              <p>Sometimes it might be convenient to have the numerical values of 
              the constraint violations</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>[p,d] = checkset(F);</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#set">set</a>,
              <a href="reference.htm#solvesdp">solvesdp</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p class="Sh2">&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="clean">CLEAN</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>y = clean(x,tol)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">y:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">tol:</font></p>
                  </td>
                  <td>double (tolerance)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">clean is used to remove base matrices in an
              <a href="reference.htm#sdpvar">sdpvar</a> object that are small (mainly 
              used together with <a href="reference.htm#solvesos">solvesos</a>)</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl"><p>Removing nuisance variables</p><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x1 = sdpvar(n,1);
x2 = sdpvar(n,1);
x = x1+1e-8*x2;
y = clean(x,1e-6);
sdisplay(y)
<font color="#000000">ans
    &#39;x1&#39;</font></pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sos">sos</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table19">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="coefficients">COEFFICIENTS</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table20">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>[c,v] = 
				coefficients(p,x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table21">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">c</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>Coefficients (sdpvar object)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">v:</font></p>
                  </td>
                  <td>Monomials (sdpvar object)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">p:</font></p>
                  </td>
                  <td>Polynomials (sdpvar object)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">x</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>Variables (sdpvar object)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">coefficients is used to extract the 
				coefficients of a polynomials.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Define a polynomial in variables <b>x</b> and
				<b>y</b>, with coefficients parameterized by <b>s</b> and <b>t</b>.<table cellpadding="10" width="100%" id="table22">
                <tr>
                  <td class="xmpcode">
                  <pre>sdpvar x y s t
p = x^2+x*y*(s+t)+s^2+t^2;</pre>
                  </td>
                </tr>
              </table>
              <p>The coefficients are easily recovered</p>
				<table cellpadding="10" width="100%" id="table23">
                <tr>
                  <td class="xmpcode">
                  <pre>c = coefficients(p,[x y]);
sdisplay(c)

<font color="#000000">ans = 
    's^2+t^2'
    's+t'
    '1'</font></pre>
                  </td>
                </tr>
              </table>
              <p>By adding a second output, the monomial basis is returned also.</p>
				<table cellpadding="10" width="100%" id="table24">
                <tr>
                  <td class="xmpcode">
                  <pre>[c,v] = coefficients(p,[x y]);
sdisplay([c v])

<font color="#000000">ans = 
    's^2+t^2'    '1'  
    's+t'        'xy' 
    '1'          'x^2'</font></pre>
					<pre>p-c'*v

<font color="#000000">ans =
     0</font></pre>
                  </td>
                </tr>
              </table>
              <p>Of-course, we might just as well consider this to be a 
				polynomial in <b>s</b> and <b>t</b> with coefficients 
				parameterized by <b>x</b> and 
				<b>y</b>.<table cellpadding="10" width="100%" id="table25">
                <tr>
                  <td class="xmpcode">
                  <pre>[c,v] = coefficients(p,[s t]);
sdisplay([c v])

<font color="#000000">ans = 
    'x^2'    '1'  
    'xy'     't'  
    '1'      't^2'
    'xy'     's'  
    '1'      's^2'</font></pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="cone">CONE</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">&nbsp;<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>c = cone(x,y)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">c:</font></p>
                  </td>
                  <td>sdpvar object (only useful in set object)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object (vector)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">y:</font></p>
                  </td>
                  <td>sdpvar object (scalar)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">cone is used to define the constraints <b>
              <font face="Tahoma">||x||</font>&#8804;<font face="Tahoma">y</font></b></td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl"><p>Constraining the Euclidean norm of a vector to 
              be less than 1 is done with</p><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(n,1);
F = set(cone(x,1));</pre>
                  </td>
                </tr>
              </table>
              <p>Of-course, arbitrary complicated constructs are possible, such 
              as constraining the norm of the diagonal to be less than the sum of 
              the off-diagonal terms in a matrix! </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(n,n);
F = set(cone(diag(x),sum(sum(x-diag(diag(x))))))</pre>
                  </td>
                </tr>
              </table>
              <p>An alternative is to use the nonlinear norm operator instead 
              (see the examples on <a href="extoperators.htm">nonlinear 
              operators</a> for details)</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(n,n);
F = set(norm(diag(x)) &lt; sum(sum(x-diag(diag(x)))))</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#rcone">rcone</a>,
              <a href="#set">set</a>, <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="cut">CUT</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>F = cut(X,&#39;tag&#39;)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>sdpvar or constraint object, or string</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;tag&#39;:</font></p>
                  </td>
                  <td>char</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">cut is used to define user-specified cuts for the 
              global BMI solver.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Example</th>
            </tr>
            <tr>
              <td class="tabxpl"><p>The result from this command is nothing but a
              <a href="#set">set</a> object.</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = sdpvar(2,2); 
F = cut((P-eye(2))*(P-eye(2))&gt;0);
<font color="#000000">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
|   ID|      Constraint|                                Type|
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
|   #1|   Numeric value|   Matrix inequality (quadratic) 2x2|
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</font></pre>
                  </td>
                </tr>
              </table>
              <p>The only difference is that this constraint will not be used in 
              the upper bound problem in the branch &amp; bound procudure. The constraint 
              will thus only be used to improve the relaxations. See the examples 
              in <a target="topic" href="globalbmi.htm">global solutions of bilinear 
              programs</a>.</p>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table69">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="dissect">DISSECT</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table70">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>F = 
				dissect(X)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table71">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>set object</td>
                </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">dissect can be used to transform extremely 
				large sparse and structured SDP constraints to a set of smaller 
				SDP constraints, at the price of introducing more variables.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Example</th>
            </tr>
            <tr>
              <td class="tabxpl">NOTE : For the examples below to work, you need 
				to have 
				<a target="_blank" href="http://www.cerfacs.fr/algor/Softs/MESHPART/">
				MESHPART</a> installed. 
				<p>Let us begin by defining a large but low bandwidth SDP 
				constraint.</p>
				<table cellpadding="10" width="100%" id="table72">
                <tr>
                  <td class="xmpcode">
                  <pre>n = 500;
r = 3;
B = randn(n,r+1);
S = spdiags(B,0:r,n,n);S = S+S';
x = sdpvar(n,1);
X = diag(x)-S;
p = randperm(n);
X = X(p,p);
F = set(X &gt; 0)
spy(F)<font color="#000000">
+++++++++++++++++++++++++++++++++++++++++++++++++++++
|   ID|      Constraint|                        Type|
+++++++++++++++++++++++++++++++++++++++++++++++++++++
|   #1|   Numeric value|   Matrix inequality 500x500|
+++++++++++++++++++++++++++++++++++++++++++++++++++++</font></pre>
                  </td>
                </tr>
              </table>
              <p>Applying the dissect command simplifies the constraint to a set 
				of two smaller SDP constraints, at the price of introducing 6 
				additional variables.</p>
              <table cellpadding="10" width="100%" id="table73">
                <tr>
                  <td class="xmpcode">
                  <pre>dissect(F)
<font color="#000000">+++++++++++++++++++++++++++++++++++++++++++++++++++++
|   ID|      Constraint|                        Type|
+++++++++++++++++++++++++++++++++++++++++++++++++++++
|   #1|   Numeric value|   Matrix inequality 252x252|
|   #2|   Numeric value|   Matrix inequality 251x251|
+++++++++++++++++++++++++++++++++++++++++++++++++++++</font>
length(getvariables(dissect(F)))
<font color="#000000">ans =</font></pre>
					<pre><font color="#000000">   506</font></pre>
                  </td>
                </tr>
              </table>
              <p>The procedure can be recursively applied.</p>
				<table cellpadding="10" width="100%" id="table74">
                <tr>
                  <td class="xmpcode">
                  <pre>dissect(dissect(F))
<font color="#000000">+++++++++++++++++++++++++++++++++++++++++++++++++++++
|   ID|      Constraint|                        Type|
+++++++++++++++++++++++++++++++++++++++++++++++++++++
|   #1|   Numeric value|   Matrix inequality 128x128|
|   #2|   Numeric value|   Matrix inequality 127x127|
|   #3|   Numeric value|   Matrix inequality 127x127|
|   #4|   Numeric value|   Matrix inequality 127x127|
+++++++++++++++++++++++++++++++++++++++++++++++++++++</font>
length(getvariables(dissect((dissect(F)))))
<font color="#000000">ans =</font></pre>
					<pre><font color="#000000">   518</font></pre>
                  </td>
                </tr>
              </table>
              <p>To see the impact of the dissection, let us solve an SDP 
				problem for various levels of dissection</p>
				<table cellpadding="10" width="100%" id="table75">
                <tr>
                  <td class="xmpcode">
                  <pre>sol = solvesdp(F,trace(X));sol.solvertime
<font color="#000000">ans =</font></pre>
					<pre><font color="#000000">  123.2810

</font>F = dissect(F);
sol = solvesdp(F,trace(X));sol.solvertime
<font color="#000000">ans =</font></pre>
					<pre><font color="#000000">   36.0940

</font>F = dissect(F);
sol = solvesdp(F,trace(X));sol.solvertime
<font color="#000000">ans =</font></pre>
					<pre><font color="#000000">   11.9070</font></pre>
					<pre>F = dissect(F);
sol = solvesdp(F,trace(X));sol.solvertime
<font color="#000000">ans =</font></pre>
					<pre><font color="#000000">    4.6410</font></pre>
					<pre>F = dissect(F);
sol = solvesdp(F,trace(X));sol.solvertime
<font color="#000000">ans =</font></pre>
					<pre><font color="#000000">    3.8430</font></pre>
					<pre>F = dissect(F);
sol = solvesdp(F,trace(X));sol.solvertime
<font color="#000000">ans =</font></pre>
					<pre><font color="#000000">    3.9370</font></pre>
                  </td>
                </tr>
              </table>
              <p>Note that the dissection command can be applied to arbitrary 
				SDP problems in YALMIP (nonlinear problems, mixed semidefinite 
				and second order cone problems etc).</p>
				<p>The algorithm in the command is based on finding a vertex 
				separator of the matrix in the SDP constraint, applying a 
				Dulmage-Mendelsohn permutation to detect corresponding blocks, 
				followed by a series of Schur completions. Details will be available in an 
				accompanying report soon...
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#set">set</a>, <a href="reference.htm#unblkdiag">unblkdiag</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="double">DOUBLE</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>Y = double(X)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">Y:</font></p>
                  </td>
                  <td>double</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>sdpvar or set object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">double is used to extract the numerical value of 
              a decision variable, or the residual of a constraint</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl"><p>After solving an optimization problem we might, 
              e.g., extract the optimal objective value.</p><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F,obj);
optobj = double(obj);</pre>
                  </td>
                </tr>
              </table>
              <p>It can also be used to extract the residual of a constraint </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F,obj);
res = double(F(1));</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#solvesdp">solvesdp</a>,
              <a href="reference.htm#assign">assign</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table76">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="hessian0">HESSIAN</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table77">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>H = hessian(f,x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table78">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">H:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">f:</font></p>
                  </td>
                  <td>scalar sdpvar object </td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">Hessian calculates d2f/dx2</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">With only 1 argument, the differentiation is performed 
              with respect to all involved variables<table cellpadding="10" width="100%" id="table79">
                <tr>
                  <td class="xmpcode">
                  <pre>x1 = sdpvar(1,1);
x2 = sdpvar(1,1);
f = x1^4+5*x2^2;
sdisplay(hessian(f))</pre>
                  <pre><font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;12x1^2&#39;    &#39;0&#39; 
    &#39;0&#39;&nbsp;&nbsp;       &#39;10&#39;</font></pre>
                  </td>
                </tr>
              </table>
              <p>Giving a second argument controls what variables to differentiate 
              with respect to </p>
              <table cellpadding="10" width="100%" id="table80">
                <tr>
                  <td class="xmpcode">
                  <pre>sdisplay(hessian(f,x1))
<font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;12x1^2&#39;</font></pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#jacobian">jacobian</a>,
              <a href="reference.htm#sdisplay">sdisplay</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="dual">DUAL</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>Z = dual(F)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">Z:</font></p>
                  </td>
                  <td>double</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object (with one constraint)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">dual is used to extract the dual variable related 
              to a constraint</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl"><p>After solving an optimization problem we might, 
              e.g., extract the dual variable of the 2nd constraint.</p><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F,obj);
Z2 = dual(F(2));</pre>
                  </td>
                </tr>
              </table>
              <p>If the constraints in the set object have been tagged, we can use 
              the tag instead </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F,obj);
Z2 = dual(F(&#39;Lyapunov constraint&#39;));</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#set">set</a>,
              <a href="reference.htm#solvesdp">solvesdp</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="dualize">DUALIZE</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>
              [Fd,objd,X,free] = dualize(F,obj)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object in primal SDP form</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">obj:</font></p>
                  </td>
                  <td>sdpvar object (primal cost)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">Fd:</font></p>
                  </td>
                  <td>set object in dual SDP form</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">objd</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object (dual cost)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>cell of sdpvar object (primal cone variables)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">free:</font></p>
                  </td>
                  <td>sdpvar objects (free primal variables)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">dualize is used to convert a SDP problem given 
              in primal form to the corresponding dual problem.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Consider the following SDP problem in primal 
              form.<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>X = sdpvar(3,3);
Y = sdpvar(3,3);
F = set(X&gt;0) + set(Y&gt;0);
F = F + set(X(1,3)==9) + set(Y(1,1)==X(2,2));
F = F + set(sum(sum(X))+sum(sum(Y)) == 20);
obj = trace(X)+trace(Y);</pre>
                  </td>
                </tr>
              </table>
              <p>We can solve this in the given format. This will however be 
              very inefficient in YALMIP, since the matrices X and Y will be 
              explicitely parameterized, and the problem will be solved in a 
              dual form with equality constraints. Instead, we note that the 
              problem is an SDP in standard primal form. We therefor let YALMIP 
              extract this primal model, and return the dual of this. If we 
              solve this problem, the dual of this will be the original primal. 
              Confused yet? (note that the dual objective should be maximized)</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>[Fd,objd,XX,y] = dualize(F,obj);
solvesdp(Fd,-objd);</pre>
                  </td>
                </tr>
              </table>
              <p>To obtain our original variables, we extract the duals</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>assign(XX{1},dual(Fd(1));
assign(XX{2},dual(Fd(2));</pre>
                  </td>
                </tr>
              </table>
              <p>Check out the tutorial for more <a href="dual.htm#dualize">
				examples</a></td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl">
              <a href="reference.htm#dual">dual</a>,
              <a href="reference.htm#set">set</a>,
              <a href="reference.htm#solvesdp">solvesdp</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="export">EXPORT</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>[model,recoverymodel] 
              = export(F,h,ops)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">model:</font></p>
                  </td>
                  <td>Output structure.</td>
                </tr>
                <tr>
                  <td>
                  <font face="Courier New" size="2">recoverymodel:</font></td>
                  <td>Output structure.</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object describing the constraints. </td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">h:</font></p>
                  </td>
                  <td>sdpvar-object describing the objective function.</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">ops:</font></p>
                  </td>
                  <td>options structure from sdpsettings.</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">export is used to export YALMIP models to 
              various solver formats (<font color="#FF0000">note : not all 
              solvers are supported yet</font>)</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl"><p>Consider a Lyapunov stability problem</p><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>A = randn(5,5);A = -A*A';
P = sdpvar(5,5);
F = set(A'*P+P*A &lt; 0) + set(P&gt;eye(5));
obj = trace(P);</pre>
                  </td>
                </tr>
              </table>
              <p>Exporting this to a model in SeDuMi format is done by 
              specifying the solver as <code>'sedumi'</code> and calling export in the same way 
              as <a href="reference.htm#solvesdp">solvesdp</a> would have ben called.</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>[model,recoverymodel] = export(F,obj,sdpsettings('solver','sedumi'));</pre>
                  <pre><font color="#000000">model = </font></pre>
                  <pre><font color="#000000">       A: [50x15 double]
       b: [15x1 double]
       C: [50x1 double]
       K: [1x1 struct]
    pars: [1x1 struct]</font></pre>
                  </td>
                </tr>
              </table>
              <p>The data in <code>recoverymodel</code> can be used to relate a solution 
              obtained from using the exported model, to the actual variables in 
              YALMIP. </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>[x,y] = sedumi(model.A,model.b,model.C,model.K);
assign(recover(recoverymodel.used_variables),y);</pre>
                  </td>
                </tr>
              </table>
              <p>Some solvers do not support equality constraints. One way to 
              handle this in YALMIP is to use <code>sdpsettings('remove',1)</code>. 
              If this is done, YALMIP derives basis and 
              solves the problem in the reduced variables. This basis is 
              communicated through the structure <code>recoverymodel</code>.</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>ops = sdpsettings('solver','sedumi','remove',1);
[model,recoverymodel] = export(F+set(trace(P)==10),obj,ops);
[x,y] = sedumi(model.A,model.b,model.C,model.K);
z = recoverymodel.x_equ + recoverymodel.H*y;
assign(recover(recoverymodel.used_variables),z);</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#solvesdp">solvesdp</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="hessian">HESSIAN</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>H = hessian(f,x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">H:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">f:</font></p>
                  </td>
                  <td>scalar sdpvar object </td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">Hessian calculates d2f/dx2</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">With only 1 argument, the differentiation is performed 
              with respect to all involved variables<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x1 = sdpvar(1,1);
x2 = sdpvar(1,1);
f = x1^4+5*x2^2;
sdisplay(hessian(f))</pre>
                  <pre><font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;12x1^2&#39;    &#39;0&#39; 
    &#39;0&#39;&nbsp;&nbsp;       &#39;10&#39;</font></pre>
                  </td>
                </tr>
              </table>
              <p>Giving a second argument controls what variables to differentiate 
              with respect to </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>sdisplay(hessian(f,x1))
<font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;12x1^2&#39;</font></pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#jacobian">jacobian</a>,
              <a href="reference.htm#sdisplay">sdisplay</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table132">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="hull">HULL</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table133">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>F = hull(F1,F2,...)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table134">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">F</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>set object </td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">Fi:</font></p>
                  </td>
                  <td>set objects</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">hull is used to create a convex representation 
				of the convex hull of a set of constraints.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Define two polytope<table cellpadding="10" width="100%" id="table135">
                <tr>
                  <td class="xmpcode">
                  <pre>sdpvar x y
F1 = set(-1 &lt; x &lt; 1) + set(-1 &lt; y &lt; 1);
F2 = set(-1.5 &lt; x-y &lt; 1.5) + set(-1.5 &lt; x+y &lt; 1.5);</pre>
                  </td>
                </tr>
              </table>
              <p>Plot the polytopes</p>
              <table cellpadding="10" width="100%" id="table136">
                <tr>
                  <td class="xmpcode">
                  <pre>plot(F2);hold on
plot(F1);</pre>
                  </td>
                </tr>
              </table>
              <p>Notice, if you have MPT installed, this is quicker</p>
              <table cellpadding="10" width="100%" id="table137">
                <tr>
                  <td class="xmpcode">
                  <pre>plot(polytope(F2));hold on
plot(polytope(F1));</pre>
                  </td>
                </tr>
              </table>
              <p>Create a convex model of the convex hull</p>
              <table cellpadding="10" width="100%" id="table138">
                <tr>
                  <td class="xmpcode">
                  <pre>H = hull(F1,F2)
+++++++++++++++++++++++++++++++++++++++++++++++++++
|   ID|      Constraint|                      Type|
+++++++++++++++++++++++++++++++++++++++++++++++++++
|   #1|   Numeric value|          Element-wise 2x1|
|   #2|   Numeric value|          Element-wise 2x1|
|   #3|   Numeric value|          Element-wise 2x1|
|   #4|   Numeric value|          Element-wise 2x1|
|   #5|   Numeric value|   Equality constraint 2x1|
|   #6|   Numeric value|   Equality constraint 1x1|
|   #7|   Numeric value|          Element-wise 2x1|
+++++++++++++++++++++++++++++++++++++++++++++++++++</pre>
                  </td>
                </tr>
              </table>
              <p>Important to realize is that the representation will introduce 
				new variables due to a lifting procedure. We can plot the convex hull, but since 
				we have introduced new variables, we must declare that we 
				are interested in the projection on the original variables <b>x</b> 
				and <b>y</b></p>
              <table cellpadding="10" width="100%" id="table139">
                <tr>
                  <td class="xmpcode">
                  <pre>clf;
plot(H,[x y]);hold on
plot(F2);
plot(F1);</pre>
                  </td>
                </tr>
              </table>
              <p>The command applies to (almost) arbitrary convex constraints.<table cellpadding="10" width="100%" id="table140">
                <tr>
                  <td class="xmpcode">
                  <pre>clf;
sdpvar x y
F1 = set([1 x y+3;[x;y+3] 1/5*eye(2)] &gt; 0);
F2 = set(-1.5 &lt; x-y &lt; 1.5) + set(-1.5 &lt; x+y &lt; 1.5);
H = hull(F1,F2);
plot(H,[x y]);hold on
plot(F2);
plot(F1);</pre>
                  </td>
                </tr>
              </table>
              <p>At the moment, the command does not support constraints that 
				involve <a href="extoperators.htm">nonlinear operators</a> or 
				quadratic terms, although this easily can be added if anyone 
				needs it.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#set">set</a>,
              <a href="reference.htm#solvesdp">solvesdp</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table4">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="imagemodel">IMAGEMODEL</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table5">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>
              [Fi,obji,x,y] = imagemodel(F,obj)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table6">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">obj:</font></p>
                  </td>
                  <td>sdpvar object (objective)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">Fd:</font></p>
                  </td>
                  <td>set object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">obji</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object (dual cost)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">x</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object&nbsp; (original variables)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">y</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object&nbsp; (original variables expressed in new 
					basis)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">imagemodel is used to reduce the number of 
				variables in a problem by eliminating explicit equality 
				constraints</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Consider the following equality constrained 
				SDP.<table cellpadding="10" width="100%" id="table7">
                <tr>
                  <td class="xmpcode">
                  <pre>C = eye(2);
A1 = randn(2,2);A1 = A1*A1';
A2 = randn(2,2);A2 = A2*A2';
A3 = randn(2,2);A3 = A3*A3';
z = sdpvar(3,1);</pre>
					<pre>obj = sum(z)
F = set(C+A1*z(1)+A2*z(2)+A3*z(3) &gt; 0) + set(z(1)+z(2)== 1)</pre>
                  </td>
                </tr>
              </table>
              <p>A model without the explicit equality constraint is easily 
				obtained.</p>
              <table cellpadding="10" width="100%" id="table8">
                <tr>
                  <td class="xmpcode">
                  <pre>[Fi,obji,x,y] = imagemodel(F,obj);</pre>
                  </td>
                </tr>
              </table>
              <p>We solve the reduced problem, and recover the original 
				variables</p>
              <table cellpadding="10" width="100%" id="table9">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F,obji);
assign(x,double(y));</pre>
                  </td>
                </tr>
              </table>
              <p>Note that this reduction is automatically done when you call
				<a href="reference.htm#solvesdp">solvesdp</a> and use a solver 
				that cannot handle equality constraints. Hence, there is 
				typically no reason to use this command, unless some further 
				manipulations are going to be performed.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl">
              <a href="reference.htm#solvesdp">solvesdp</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="integer">INTEGER</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>c = integer(x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">c:</font></p>
                  </td>
                  <td>sdpvar object (only useful in set object)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">integer is used to constrain a set of variable 
              to be integer.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Setting up a integer linear program {<b><font face="Tahoma">min 
              c<sup>T</sup>x subject to Ax</font>&#8804;<font face="Tahoma">b</font></b>} 
              can be done as<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = intvar(n,1);
solvesdp(set(A*x&lt;b),c&#39;*x)</pre>
                  </td>
                </tr>
              </table>
              <p>or </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre> </pre>
                  <pre>x = sdpvar(n,1);
solvesdp(set(A*x&lt;b)+set(integer(x),c&#39;*x)</pre>
                  </td>
                </tr>
              </table>
              <p>Note, the integrality constraint is imposed on the involved variables, 
              not the actual <a href="#sdpvar">sdpvar</a> object. Hence, the following 
              two constraints are equivalent </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(integer(x));
F = set(integer(pi+sqrt(2)*x));</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#intvar">intvar</a>,
              <a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#binvar">binvar</a>, <a href="#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="intvar">INTVAR</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax </th>
              <td class="code" valign="top" nowrap width="100%"><code>x = intvar(n,m,&#39;field&#39;,&#39;type&#39;)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">n:</font></p>
                  </td>
                  <td>Height</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">m:</font></p>
                  </td>
                  <td>Width</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;field&#39;:</font></p>
                  </td>
                  <td>char {&#39;real&#39;,&#39;complex&#39;}</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;type&#39;:</font></p>
                  </td>
                  <td>char {&#39;symmetric&#39;,&#39;full&#39;,&#39;hermitian&#39;,&#39;toeplitz&#39;,&#39;hankel&#39;,&#39;skew&#39;}</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">intvar is used to define symbolic decision variables 
              with integer elements.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">A scalar integer variable is defined with<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = intvar(1,1)</pre>
                  </td>
                </tr>
              </table>
              <p>For more examples, see <a href="reference.htm#sdpvar">sdpvar</a>.</p>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#binvar">binvar</a>,
              <a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#integer">integer</a>,
              <a href="reference.htm#binary">binary</a>, <a href="#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="is">IS</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>y = is(x,&#39;property&#39;)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">y:</font></p>
                  </td>
                  <td>logical</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar or set object </td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">property</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>char {&#39;real&#39;, &#39;symmetric&#39;, &#39;hermitian&#39;, &#39;scalar&#39;, &#39;linear&#39;, 
                  &#39;homogeneous&#39;, &#39;integer&#39;, &#39;binary&#39;}&nbsp; for sdpvar&nbsp; objects, 
                  {&#39;elementwise&#39;, &#39;socc&#39;,&#39;lmi&#39;, &#39;linear&#39;, &#39;kyp&#39;} on set objects</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">is is used to check properties of sdpvar and set 
              objects.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Checking if an <a href="reference.htm#sdpvar">sdpvar</a> 
              object is linear can be done with is<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(1,1);
y = [x;x*x];
is(y,&#39;linear&#39;)
<font color="#000000">ans =
     0</font></pre>
                  </td>
                </tr>
              </table>
              <p>The command works almost in the same way on <a href="#set">set
              </a>objects, with the difference that the check is performed on every 
              constraint in the <a href="reference.htm#set">set</a> object separately, 
              so the output can be a vector </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(1,1);
F = set(x&gt;1) + set([1 x;x 1]&gt;0) + set(x&lt;3);
is(F,&#39;elementwise&#39;)
<font color="#000000">ans =</font></pre>
                  <pre><font color="#000000">     1
     0
     1</font></pre>
                  </td>
                </tr>
              </table>
              <p>Hence, creating a <a href="#set">set</a> object containing only 
              the element-wise constraints is done with </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F_element = F(is(F,&#39;elementwise&#39;));</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table112">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="ismember">ISMEMBER</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table113">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>F = 
				ismember(x,Y)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table114">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">F</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>set object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">Y:</font></p>
                  </td>
                  <td>vector of doubles or polytope array</td>
                </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl" height="26"><a href="#ismember">ismember</a> is used to constrain an sdpvar object to be part 
				of a set of doubles or polytopes</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">To constrain a scalar variable to take a value 
				from a finite set, <a href="#ismember">ismember</a> can be used.<table cellpadding="10" width="100%" id="table115">
                <tr>
                  <td class="xmpcode">
                  <pre>sdpvar x
F = set(ismember(x,[1 2 3 4]));</pre>
                  </td>
                </tr>
              </table>
              <p>Of course, this can also be obtained with a standard integer 
				variable.</p><table cellpadding="10" width="100%" id="table116">
                <tr>
                  <td class="xmpcode">
                  <pre>intvar x
F = set(1 &lt;= x &lt;=4);</pre>
                  </td>
                </tr>
              </table>
              <p>or an integrality constraint</p>
              <table cellpadding="10" width="100%" id="table117">
                <tr>
                  <td class="xmpcode">
                  <pre>sdpvar x
F = set(integer(x)) + set(1 &lt;= x &lt;= 4);</pre>
                  </td>
                </tr>
              </table>
              <p>The functionality is more useful when the set is more 
				complicated.</p>
				<table cellpadding="10" width="100%" id="table121">
                <tr>
                  <td class="xmpcode">
                  <pre>sdpvar x
F = set(ismember(x,[1 pi 12 -8]));</pre>
                  </td>
                </tr>
              </table>
              <p>The function <a href="#ismember">ismember</a> can also be used together with the 
				polytope object in <a href="solvers.htm#mpt">MPT</a> to constrain a variable to be inside 
				at least one 
				of several polytopes.</p>
				<table cellpadding="10" width="100%" id="table122">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(3,1);
P1 = polytope(randn(10,3),rand(10,1));
P2 = polytope(randn(10,3),rand(10,1));
F = set(ismember(x,[P1 P2]));</pre>
                  </td>
                </tr>
              </table>
              <p>Note that <a href="#ismember">ismember</a> will introduce binary variables if the 
				cardinality of the set <b>Y</b> is larger than 1</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#set">set</a></td>
            </tr>
          </table>
          
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="jacobian">JACOBIAN</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>J = jacobian(f,x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">J:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">f:</font></p>
                  </td>
                  <td>sdpvar object </td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">jacobian calculates the Jacobian df/dx.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">With only 1 argument, the differentiation is performed 
              with respect to all involved variables (more precisely, with respect 
              to the variables <a href="reference.htm#recover">recover</a>(<a href="reference.htm#depends">depends</a>(f)))<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x1 = sdpvar(1,1);
x2 = sdpvar(1,1);
f = x1^2+5*x2^2;
sdisplay(jacobian(f))</pre>
                  <pre><font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;2x1&#39;   &#39;10x2&#39;</font></pre>
                  </td>
                </tr>
              </table>
              <p>Giving a second argument controls what variables to differentiate 
              with respect to </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>sdisplay(jacobian(f,x2))
<font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;10x2&#39;</font></pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#hessian">hessian</a>,
              <a href="reference.htm#sdisplay">sdisplay</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="kyp">KYP</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>x = kyp(A,B,P,M)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object (only useful in set)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">A:</font></p>
                  </td>
                  <td>double (square matrix)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">B:</font></p>
                  </td>
                  <td>double</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">P:</font></p>
                  </td>
                  <td>sdpvar object (symmetric)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">M:</font></p>
                  </td>
                  <td>sdpvar object (symmetric)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">kyp is used to define LMIs related to the KYP-lemma 
              and Lyapunov equations</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Defining the Lyapunov constraint <b>
              <font face="Tahoma">A<sup>T</sup>P+PA&lt;0</font></b> can be done using
              <a href="reference.htm#kyp">kyp</a><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(kyp(A,[],P) &lt; 0)</pre>
                  </td>
                </tr>
              </table>
              <p>Tthe following command is equivalent </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(A&#39;*P+P*A &lt; 0)</pre>
                  </td>
                </tr>
              </table>
              <p>but the difference is that YALMIP does not know that the constraint 
              is a Lyapunov equation, hence it will not be able to use the dedicated 
              solver <a href="solvers.htm#kypd">KYPD</a>.<br />
              <br />
              <a href="reference.htm#kyp">kyp </a>can also be used to define more 
              complex constraints. The following two commands generate the constraint&nbsp;
              <b><font face="Tahoma">[A<sup>T</sup>P+PA PB;B<sup>T</sup>P 0] + M(x) 
              &lt; 0 </font></b>(<b>P</b> and <b>x</b> are decision variables). </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set([A&#39;*P+P*A P*B;B&#39;*P zeros(size(B,2))]+M &lt; 0);
F = set(kyp(A,B,P,M) &lt; 0);</pre>
                  </td>
                </tr>
              </table>
              <p>The dedicated solver <a href="solvers.htm#kypd">KYPD</a> can only 
              be used if the variable <b>P</b> is symmetric matrix, obtained directly 
              from <font color="#0000ff"><a href="reference.htm#sdpvar">sdpvar</a></font>, 
              used only in 1 constraint.&nbsp; This means that you cannot use
              <a href="solvers.htm#kypd">KYPD</a> if you want to impose explicit 
              constraints (including positive definiteness) on <b>P</b>. However, 
              positive definiteness of <b>P </b>is in some cases implied by the 
              KYP constraint</p>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><font color="#0000ff">
              <a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#set">set</a></font></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="linearize">LINEARIZE</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>h = linearize(p)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">h:</font></p>
                  </td>
                  <td>sdpvar object </td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">p:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">Returns linearization p(double(x)) + dp(double(x))*(x-double(x)) 
              where x is the <a href="reference.htm#sdpvar">sdpvar</a> variables 
              defining the polynomial p(x).</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">The linearization is performed at the current value 
              of <a href="reference.htm#double">double</a>(x)<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(1,1);
f = x^2;
assign(x,1);
sdisplay(linearize(f))
<font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;-1+2x&#39;</font>

assign(x,3);
sdisplay(linearize(f))
<font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;-9+6x&#39;</font></pre>
                  </td>
                </tr>
              </table>
              <p>The command of-course applies to matrices as well </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>p11 = sdpvar(1,1);p12 = sdpvar(1,1);p22 = sdpvar(1,1);
P = [p11 p12;p12 p22];
assign(P,[3 2;2 5])</pre>
                  <pre>sdisplay(linearize(P*P))<font color="#000000">
ans = </font></pre>
                  <pre><font color="#000000">    &#39;-13+6p11+4p12&#39;&nbsp;&nbsp;       &#39;-16+2p11+8p12+2p22&#39;
    &#39;-16+2p11+8p12+2p22&#39;    &#39;-29+4p12+10p22&#39; </font>   </pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#jacobian">jacobian</a>,
              <a href="reference.htm#hessian">hessian</a>,
              <a href="reference.htm#sdisplay">sdisplay</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="logdet">LOGDET</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>p = logdet(x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">p:</font></p>
                  </td>
                  <td>sdpvar object (only useful in
                  <a href="reference.htm#logdet">solvesdp</a>)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">logdet is used to define objective functions in 
              MAXDET problems. This command will likely become obsolete in a 
              future version.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">See <a href="ellipsoidal.htm">MAXDET example</a>.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#solvesdp">solvesdp</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="lowrank">LOWRANK</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>H = lowrank(F,x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">H</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>set object (only useful in 
                  <a href="reference.htm#logdet">solvesdp</a>)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <font face="Courier New">x:</font></td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
             Description</th>
            </tr>
            <tr>
              <td class="tabxpl">lowrank is used to declare that a semidefinite 
              constraint uses <b>data</b> with low rank.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl"><p>Define a semidefinite constraint 
              with low-rank data matrices (both variables in <b>x</b> enter the 
              constraint via rank-2 matrices)</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(2,1);
C = randn(10,10);C = C*C';
R = randn(10,2);
F = set(C-R*diag(x)*R' &gt; 0);</pre>
                  </td>
                </tr>
              </table>
              <p>If a low-rank data exploiting solver is available (currently 
              only<a target="_blank" href="http://dollar.biz.uiowa.edu/~burer/software/SDPLR/">
              SDPLR</a>), we can ask YALMIP to extract low-rank 
              information and pass this to the solver. </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F + lowrank(F),-sum(x),sdpsettings('solver','sdplr'));</pre>
                  </td>
                </tr>
              </table>
              <p>In some cases, the low-rank structure is only with respect to 
              some variables, as here where <b>y</b> enters via a full rank matrix. 
              In this cases, it might be counter productive to try to exploit 
              the (non-existing) low rank.</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(2,1);
y = sdpvar(1,1);
C = randn(10,10);C = C*C';
R = randn(10,2);
S = randn(10,10);S = S+S';
F = set(C-R*diag(x)*R'-y*S &gt; 0);</pre>
                  </td>
                </tr>
              </table>
              <p>In this case, it is possible to tell YALMIP which variables 
              enter in a low-rank fashion, here <b>x</b>.<p>
              </p><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F+lowrank(F,x),-sum(x)-y,sdpsettings('solver','sdplr'));</pre>
                  </td>
                </tr>
              </table>
              <p>An alternative way to work with low rank data matrices is to 
              use the option sdpsettings('sdprl.maxrank'). By changing this 
              setting from it default value of 0, YALMIP will automatically 
              check all data matrices for low rank structure, and send low rank 
              data to the solver if the rank is less than the value of 
              sdpsettings('sdprl.maxrank'). Hence, YALMIP will exploit low rank 
              w.r.t <b>x</b> but not <b>y</b> in the following solution. </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F,-sum(x)-y,sdpsettings('solver','sdplr','sdplr.maxrank',2));</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commandss</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#solvesdp">solvesdp</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table10">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="monolist">MONOLIST</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table11">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax </th>
              <td class="code" valign="top" nowrap width="100%"><code>v = 
				monolist(x,d)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table12">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">x</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object </td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">d</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>Maximum degrees</td>
                </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">monolist is used to generate monomials</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Create all monomials of degree less than 2<table cellpadding="10" width="100%" id="table13">
                <tr>
                  <td class="xmpcode">
                  <pre>sdpvar x y
v = monolist([x y],2);
sdisplay(v')
 
<font color="#000000">ans = </font></pre>
					<pre><font color="#000000">  '1'   'x'   'y'   'x^2'   'xy'   'y^2'</font></pre>
                  </td>
                </tr>
              </table>
              <p>The command support different degrees on different variables<br>
&nbsp;</p><table cellpadding="10" width="100%" id="table14">
                <tr>
                  <td class="xmpcode">
                  <pre>sdpvar x y
v = monolist([x y],[2 3]);
sdisplay(v')

<font color="#000000">ans = </font></pre>
					<pre><font color="#000000">  '1'   'x'   'y'   'x^2'   'xy'   'y^2'   'x^2y'   'xy^2'   'y^3'</font></pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdisplay">sdisplay</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="plot">PLOT</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p></p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>p = plot(F,x,c,n,options)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">x</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar variable</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">c:</font></p>
                  </td>
                  <td>char or double</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">n</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>double</td>
                </tr>
                <tr>
                  <td><font face="Courier New">options:</font></td>
                  <td>options structure from <a href="#sdpsettings">sdpsettings</a></td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">plot is used to plot the (projection) of the feasible 
              set</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Define a set in <b>R<sup>3</sup></b><table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(3,1);

F = set([1 x(2);x(2) x(1)])+set(3 &gt; x);
F = F + set([1 x&#39;;x eye(3)]&gt;0) + set(sum(x)&gt;x&#39;*x);</pre>
                  </td>
                </tr>
              </table>
              <p>Plot the feasible set, projected on <b>(x<sub>1</sub>,x<sub>3</sub>)</b></p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>plot(F,[x(1);x(3)])</pre>
                  </td>
                </tr>
              </table>
              <p>By default, the feasible set is projected to <b>R<sup>3</sup></b> 
              (the three variables with lowest index in YALMIP) </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>plot(F)</pre>
                  </td>
                </tr>
              </table>
              <p>Why not the feasible set on <b>x<sub>1</sub>=0.5</b></p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>plot(replace(F,x(1),0.5))</pre>
                  </td>
                </tr>
              </table>
              <p>A third argument can be used to control the color </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>plot(F,[],&#39;b&#39;)</pre>
                  </td>
                </tr>
              </table>
              <p>A fourth argument can be used to control the accuracy</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>plot(F,[],[],150)</pre>
                  </td>
                </tr>
              </table>
              <p>The fifth argument can be used to pass an options structure for 
              the solver</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>plot(F,[],[],[],sdpsettings(&#39;solver&#39;,&#39;sedumi&#39;,'verbose',0));</pre>
                  </td>
                </tr>
              </table>
              <p>To avoid strange looking plots, you should ensure that your 
				feasible set is bounded. One way to that is to add bounds on on 
				variables.</p>
              <table cellpadding="10" width="100%" id="table86">
                <tr>
                  <td class="xmpcode">
                  <pre>plot(F+set(-100 &lt; recover(depends(F)) &lt; 100));</pre>
                  </td>
                </tr>
              </table>
              <p>Note that plotting the feasible set requires solving the 
              associated optimization problem repeatedly. Hence, for feasible 
              sets defined by a lot of constraints and variables, it may take a 
              long time to generate the figure (controlled by the accuracy level 
              in the fourth argument, 25 points is default for 2D and 100 for 3D 
              figures, although much more is recommended for smooth figures). For small problems, a large portion of 
              the solution time can easily be dominated by overhead costs. 
              Hence, it is recommended to use a solver with low overhead (for 
              SDP problems, <a href="solvers.htm#pensdp">PENSDP</a> is 
              recommended)<p>Also note that when you plot sets with constraints involving 
				<a href="extoperators.htm">nonlinear 
			operators</a> and polynomials, it is recommended that you specify the variables 
			of interest in the second argument (YALMIP may otherwise plot the set 
			with respect to auxiliary variables introduced during the construction 
			of the conic model.)</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#set">set</a>,<a href="#plotsdpvar"> plot</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table88">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="plotsdpvar">PLOT</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table89">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p></p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>plot(t)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table90">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">t</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">plot is used to plot the PWA model of a 
				variable generated using <a href="extoperators.htm">nonlinear 
				operators</a> that can be modeled with linear constraints</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Plot the L<sub>1</sub> norm<table cellpadding="10" width="100%" id="table91">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(2,1);
clf;plot(norm(x,1))</pre>
                  </td>
                </tr>
              </table>
              <p>Or a more complex PWA expression</p>
				<table cellpadding="10" width="100%" id="table99">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(2,1);
clf;plot(norm(randn(5,2)*x,1)+ max(x)-5*x(2))</pre>
                  </td>
                </tr>
              </table>
              <p>Notice that the command by default plots the function over a 
				grid from -100 to 100. This can currently not be changed. 
				However, we can easily circumvent this by using the main 
				function used in plot. </p>
              <table cellpadding="10" width="100%" id="table92">
                <tr>
                  <td class="xmpcode">
                  <pre>p = pwa(norm(randn(5,2)*x,1)+ max(x)-5*x(2),set(-1&lt;x&lt;1));
clf;plot(p)</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#plot">plot</a> </td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="polyprint">POLYPRINT</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">Polyprint is obsolete and replaced with
              <a href="reference.htm#sdisplay">sdisplay</a></td>
            </tr>
            </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table1">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="primalize">PRIMALIZE</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table2">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>
              [Fp,objp,y] = primalize(F,obj)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table3">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object in dual SDP form</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">obj:</font></p>
                  </td>
                  <td>sdpvar object (primal cost)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">Fp:</font></p>
                  </td>
                  <td>set object in primal SDP form</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">objd</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object (primal cost)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">y</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object (detected dual variables)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">dualize is used to convert a SDP problem given 
              in primal form to the corresponding dual problem.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">See <a href="dual.htm">examples</a>.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl">
              <a href="reference.htm#dualize">dualize</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table81">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="pwf">PWF</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table82">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>t = double(f1,F1,f2,F2,...,fn,Fn)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table83">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">t</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">fi:</font></p>
                  </td>
                  <td>sdpvar object (function value)</td>
                </tr>
                <tr>
                  <td>
                  <font face="Courier New">F</font><font face="Courier New" size="2">i</font></td>
                  <td>set object (region guard)</td>
                </tr>
                <tr>
                  <td>
                  &nbsp;</td>
                  <td>&nbsp;</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">pwf is used to define piece-wise functions.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Consider a model where the function has the 
				value <b>f1(x)</b> when the constraint <b>F1(x)</b> holds and <b>
				f2(x)</b> when the constraint <b>F2(x)</b> holds. This can be 
				modeled as<table cellpadding="10" width="100%" id="table84">
                <tr>
                  <td class="xmpcode">
                  <pre>sdpvar x y
F1 = set(x+y&lt;0);
F2 = set(x+y&gt;0);
f1 = (x+3)^2+(y+2)^2+7;
f2 = (x+3)^2+(y-2)^2+9;
t = pwf(f1,F1,f2,F2);</pre>
                  </td>
                </tr>
              </table>
              <p>The variable returned from the function is a so called
				<a href="extoperators.htm">nonlinear operator</a>. To minimize 
				the piece-wise function, we use the variable <b>t</b> as usual and 
				simply call <a href="reference.htm#solvesdp">solvesdp</a>. YALMIP 
				will automatically try to construct a model that can be 
				solved. In this case, YALMIP will derive a mixed integer second 
				order cone problem. </p>
              <table cellpadding="10" width="100%" id="table85">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp([],t);</pre>
                  </td>
                </tr>
              </table>
              <p>Support for piece-wise functions is still limited, but can 
				easily be improved if wanted. At the moment, the function can be 
				defined using arbitrary functions and sets, but when it comes down to 
				computing things, only convex quadratic functions and regions 
				defined by convex quadratic constraints are allowed.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#solvesdp">solvesdp</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table15">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="rank">RANK</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table16">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>r = rank(x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table17">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">r</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object (only useful in set object)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">x</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">rank is mainly used for creating rank 
				constraints.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">The <a href="extoperators.htm">nonlinear 
				operator</a> rank is used to add rank constraints to SDP 
				problems. <table cellpadding="10" width="100%" id="table18">
                <tr>
                  <td class="xmpcode">
                  <pre>F = F + set(rank(X)&lt;=1)</pre>
                  </td>
                </tr>
              </table>
              <p>For more information, please study the <a href="ranksdp.htm">
				rank constrained</a> example.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="rcone">RCONE</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>c = rcone(x,y,z)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">c:</font></p>
                  </td>
                  <td>sdpvar object (only useful in set object)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object (vector)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">y:</font></p>
                  </td>
                  <td>sdpvar object (scalar)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">z:</font></p>
                  </td>
                  <td>sdpvar object (scalar)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">rcone is used to define the constraints <b>z<sup>T</sup>z&lt;2xy</b>,
              <b>x</b>,<b>y&gt;0</b> (The rotated Lorentz cone)</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Constraining the squared Euclidean norm of a vector 
              to be less than 2 is done with<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(n,1);
F = set(rcone(x,1,1));</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#cone">cone</a>,
              <a href="reference.htm#set">set</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="saveampl">SAVEAMPL</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>saveampl(F,h,filename)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object describing the constraints</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">h</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object describing the objective function</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">filename</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>char (can be [])</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">saveampl exports a YALMIP model to an AMPL model.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Well, not much to say. Here is a simple MILP exported 
              to an AMPL model<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(3,1);
A = randn(5,3);
b = randn(5,1);
c = randn(3,1);
F = set(A*x &lt; b) + set(integer(x(2:3)));
saveampl(F,c&#39;*x,&#39;myamplmodel.mod&#39;);</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#solvesdp">solvesdp</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table26">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="savesdpafile">SAVESDPAFILE</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table27">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>savesdpafile(F,h,filename)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" id="table28">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object describing the constraints</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">h</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object describing the objective function</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">filename</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>char (can be [])</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">savesdpafile exports a YALMIP model to an SDPA 
				ASCII format</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Export SDP problem to ASCII file.<table cellpadding="10" width="100%" id="table29">
                <tr>
                  <td class="xmpcode">
                  <pre>A = randn(3,3);A = -A*A';
P = sdpvar(3,3);
F = set(P&gt;0) + set(A'*P+P*A &lt; -eye(3));
saveampl(F,trace(P),&#39;mysdpamodel');</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#solvesdp">solvesdp</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="sdisplay">SDISPLAY</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>t = 
              sdisplay(p)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">t:</font></p>
                  </td>
                  <td>cell array of chars</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">p:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">Tries to display an sdpvar object in symbolic 
				MATLAB 
              form</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">The command is useful for displaying polynomial
              <a href="reference.htm#sdpvar">sdpvar</a> objects<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(1,1);y = sdpvar(1,1);
f = [x;x^2+y+x*y];
sdisplay(f)

<font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;x&#39;
    &#39;y+x^2+xy&#39;</font></pre>
                  </td>
                </tr>
              </table>
              <p>The command tries to find the symbolic names of variables, but 
				if this fails, the variable name <b>internal</b> will be used. 
				Additionally, variables defined using nonlinear operators can 
				currently not be displayed.</p>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#jacobian">jacobian</a>,
              <a href="reference.htm#hessian">hessian</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="sdpsettings">SDPSETTINGS</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>options = 
              sdpsettings(&#39;field&#39;,value,&#39;field&#39;,&#39;value&#39;,...)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;field&#39;:</font></p>
                  </td>
                  <td>Option to be modified</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;value&#39;:</font></p>
                  </td>
                  <td>New setting</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">sdpsettings is used to set parameters to control 
              the behavior of solvers and YALMIP</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">The easiest way to see what the possible options 
              are is to define a options structure and display it<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>ops = sdpsettings</pre>
                  <pre><font color="#000000">ops = </font></pre>
					<pre><font color="#000000">               solver: ''
              verbose: 1
              warning: 1
         cachesolvers: 0
        beeponproblem: [-5 -4 -3 -2 -1]
         showprogress: 0
            saveduals: 1
     removeequalities: 0
     savesolveroutput: 0
      savesolverinput: 0
    convertconvexquad: 1
               radius: Inf
                relax: 0
                usex0: 0
                shift: 0
            savedebug: 0
                  sos: [1x1 struct]
               moment: [1x1 struct]
                  bnb: [1x1 struct]
                bpmpd: [1x1 struct]
               bmibnb: [1x1 struct]
               cutsdp: [1x1 struct]
               global: [1x1 struct]
                  cdd: [1x1 struct]
                  clp: [1x1 struct]
                cplex: [1x1 struct]
                 csdp: [1x1 struct]
                 dsdp: [1x1 struct]
                 glpk: [1x1 struct]
                 kypd: [1x1 struct]
               lmilab: [1x1 struct]
              lmirank: [1x1 struct]
              lpsolve: [1x1 struct]
               maxdet: [1x1 struct]
                  nag: [1x1 struct]
               penbmi: [1x1 struct]
               pennlp: [1x1 struct]
               pensdp: [1x1 struct]
                 sdpa: [1x1 struct]
                sdplr: [1x1 struct]
                sdpt3: [1x1 struct]
               sedumi: [1x1 struct]
                qsopt: [1x1 struct]
               xpress: [1x1 struct]
             quadprog: [1x1 struct]
              linprog: [1x1 struct]
             bintprog: [1x1 struct]
              fmincon: [1x1 struct]
           fminsearch: [1x1 struct]</font></pre>
                  </td>
                </tr>
              </table>
              <p>Changing a value from the default settings is done as</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>ops = sdpsettings(&#39;solver&#39;,&#39;dsdp&#39;,&#39;verbose&#39;,0)</pre>
                  </td>
                </tr>
              </table>
              <p><b><a name="sdpsettings_solver"></a>solver</b></p>
				<p>In the code above, we told YALMIP to use the solver DSDP, and to 
              run in silent mode. The possible values to give to the field <code>
              solver </code>can be found in the <a href="solvers.htm">introduction 
              to the solvers</a>. If the solver DSDP not is found, an error 
				message will be reported. To let YALMIP select the solver, use 
				the solver tag <code>''</code>. If you give a comma-separated list of solvers 
				such as <code>'dsdp,csdp,sdpa'</code>, YALMIP will select based 
				on this preference. If you add a wildcard in the end <code>'dsdp,csdp,sdpa,*'</code>, 
				YALMIP will select another solver if none of the solvers in the 
				list were found. </p>
				<p><b>verbose</b></p>
				<p>By setting <code>verbose</code> to 0, the solvers will run with 
              minimal display. By increasing the value, the display level is controlled 
              (typically 1 gives modest display level while 2 gives an awful amount 
              of information printed). </p>
				<p><b>warning</b></p>
				<p>The <code>warning</code> option can be used 
              to get a warning displayed when a solver has run into some kind of 
              problem (recommended to be used if the solver is run in silent mode).&nbsp; 
              </p>
				<p><b>beeponproblem</b></p>
				<p>The field <code>beeponproblem</code> contains a list of error codes 
              (see yalmiperror). YALMIP will beep if any of these errors occurs 
              (nice feature if you&#39;re taking a coffee break during heavy calculations).</p>
              <p><b>showprogress</b></p>
				<p>When the field <code>showprogress</code> is set to 1, the user 
              can see what YALMIP currently is doing (might be a good idea for large-scale 
              problems). </p>
              <p><b>cachesolvers</b></p>
				<p>Everytime <a href="#solvesdp">solvesdp</a> is called, YALMIP checks 
              for available solvers. This can take a while on some systems (some 
              networks), so it is possible to avoid doing this check every call. 
              Set <code>cachesolvers</code> to 1, and YALMIP will remember the solvers 
              (using a persistent variable) found in the first call to
              <a href="#solvesdp">solvesdp</a>. If solvers are added to the path 
              after the first call, YALMIP will not detect this. Hence, after adding 
              a solver to the path the work-space must be cleared or
              <a href="#solvesdp">solvesdp</a> must be called once with <code>cachesolvers</code> 
              set to 0.</p>
              <p><b>removeequalities</b></p>
				<p>When the field <code>removeequalities</code> is set to 1, YALMIP 
              removes equality constraints using a QR decomposition and reformulates 
              the problem using a smaller set of variables. If <code>removeequalities</code> is set to 
				2, YALMIP 
              removes equality constraints using a basis derived directly from 
				independent columns of the equality constraints (higher 
				possibility of maintaining sparsity than the QR approach, but 
				may lead to a numerically poor basis). With <code>removeequalities</code> 
              set to -1, equalities are removed by YALMIP by converting them to 
              double-sided inequalities. When set to 0, YALMIP does nothing if 
              the solver supports equalities. If the solver does not support 
              equalities, YALMIP uses double-sided inequalities.</p>
              <p><b>saveduals</b></p>
				<p>If the field <code>saveduals</code> is set to 0, the dual variables 
              will not be saved in YALMIP. This might be useful for large sparse 
              problems with a dense dual variable. Setting the field to 0 will then 
              save some memory.</p>
              <p><b>savesolverinput, savesolveroutput</b></p>
				<p>The fields <code>savesolverinput</code> and <code>savesolveroutput</code> 
              can be used to see what is actually sent to and returned from the 
              solver. This data will then be available in the output structure from 
              solvesdp.</p>
              <p><b>convertconvexquad</b></p>
				<p>With <code>convertconvexquad</code> set to 1, YALMIP will try to 
              convert quadratic constraints to second order cones.</p>
              <p>A constraint <b><font face="Tahoma">||x||&#8804;radius</font><font face="Times New Roman">
              </font></b>on the vector of all involved decision variables can be 
              added by changing the field <code>radius</code> to a finite positive 
              value. This can improve numerical performance in some cases. In fact, 
              the field <code>radius</code> may be an <a href="#sdpvar">sdpvar</a> 
              object. If you work with semidefinite programs and standard convex 
				programming, it is recommended to keep the feature on. However, 
				if you work with more general nonlinear optimization problem, it 
				is most often recommended to turn the conversion off.</p>
              <p><b>shift</b></p>
				<p>Strict inequalities can be modeled in YALMIP by using the &gt; and 
              &lt; when defining constraints. The behaviour of this feature can be 
              altered using the option <code>shift</code>. For constraints 
				defined 
              with strict constraints, a small perturbation is added (semidefinite 
              constraints <b><font face="Tahoma">F(x)&gt;0</font></b> are changed to
              <b><font face="Tahoma">F(x)&#8805;shift*I</font></b>, while element-wise 
              constraints are changed from <b><font face="Tahoma">F(x)&gt;0 </font>
              </b>to <b><font face="Tahoma">F(x)&#8805;shift</font></b>). Note that the 
              use of this feature does not guarantee a strictly feasible solution. 
              This depends on the solver.</p>
              <p><b>relax</b></p>
				<p>If <code>relax</code> is set to 1, all nonlinearities and integrality 
              constraints will be disregarded. Integer variables are relaxed to 
              continuous variables and nonlinear variables are treated as independent 
              variables (i.e., <b>x</b> and <b>x</b><sup><b>2</b></sup> will be 
              treated as two separate variables).</p>
              <p><b>usex0</b></p>
				<p>The current solution (the value returned from the
              <a href="#double">double</a> command) can be used as an initial guess 
              when solving an optimization problem. Setting the field <code>usex0</code> 
              to 1 tells YALMIP to supply the current values as an initial guess 
              to the solver.</p>
              <p><b>solver options</b></p>
				<p>The options structure also contains a number of structures with 
              parameters used in the specific solver. As an example, the following 
              parameters can be tuned for SeDuMi (for details, the user is referred 
              to the manual of the specific solver).</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>ops.sedumi
<font color="#000000">ans = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       alg: 2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       theta: 0.2500
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       beta: 0.5000
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       eps: 1.0000e-009
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       bigeps: 0.0010
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       numtol: 1.0000e-005
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       denq: 0.7500
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       denf: 10
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       vplot: 0
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       maxiter: 100
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       stepdif: 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       w: [1 1]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       stopat: -1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       cg: [1x1 struct]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       chol: [1x1 struct]</font></pre>
                  </td>
                </tr>
              </table>
              <p>Finally, a convenient way to alter a lot of options is to send 
              an existing options structure as the first input argument.</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>ops = sdpsettings(&#39;solver&#39;,&#39;sdpa&#39;);
ops = sdpsettings(ops,&#39;verbose&#39;,0);</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#solvesdp">solvesdp</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="sdpvar">SDPVAR</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>x = sdpvar(n,m,&#39;field&#39;,&#39;type&#39;)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">n:</font></p>
                  </td>
                  <td>Height(s)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">m:</font></p>
                  </td>
                  <td>Width(s)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;field&#39;:</font></p>
                  </td>
                  <td>char {&#39;real&#39;,&#39;complex&#39;}</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;type&#39;:</font></p>
                  </td>
                  <td>char {&#39;symmetric&#39;,&#39;full&#39;,&#39;hermitian&#39;,&#39;toeplitz&#39;,&#39;hankel&#39;,&#39;skew&#39;}</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">sdpvar is used to define symbolic decision variables.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">A scalar real-valued variable is defined with<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = sdpvar(1,1)</pre>
                  </td>
                </tr>
              </table>
              <p>A square real-valued symmetric matrix is obtained with </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = sdpvar(n,n)</pre>
                  </td>
                </tr>
              </table>
              <p>The commands above can be simplified by only giving one argument 
              when defining a symmetric matrix or a scalar (this might not work 
              on MATLAB 5.3 and earlier version). </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = sdpvar(n)</pre>
                  </td>
                </tr>
              </table>
              <p>We can also define the same matrix using a more verbose notation.
              </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = sdpvar(n,n,&#39;symmetric&#39;)</pre>
                  </td>
                </tr>
              </table>
              <p>A fully parameterized square matrix requires a third argument.</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = sdpvar(n,n,&#39;full&#39;)</pre>
                  </td>
                </tr>
              </table>
              <p>A square complex-valued fully parameterized matrix is obtained 
              with </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = sdpvar(n,n,&#39;full&#39;,&#39;complex&#39;)</pre>
                  </td>
                </tr>
              </table>
              <p>YALMIP tries to complete the third and fourth argument, so an equivalent 
              command is </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = sdpvar(n,n,&#39;sy&#39;,&#39;co&#39;)</pre>
                  </td>
                </tr>
              </table>
              <p>Variables can alternatively be defined using command 
              line syntax.</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>sdpvar x y z(1,1) u(2,2) v(2,3,'full','complex')</pre>
                  </td>
                </tr>
              </table>
              <p>A lot of users seem to get stuck initially on simple things 
				such as defining a diagonal matrix. The most important thing to 
				remember when working with YALMIP is that almost all MATLAB 
				operators can be applied also on sdpvar objects. Hence, we 
				create diagonal matrices with </p>
              <table cellpadding="10" width="100%" id="table104">
                <tr>
                  <td class="xmpcode">
                  <pre>X = diag(sdpvar(n,1));</pre>
                  </td>
                </tr>
              </table>
              <p>Or Hankel...</p>
              <table cellpadding="10" width="100%" id="table105">
                <tr>
                  <td class="xmpcode">
                  <pre>X = hankel(sdpvar(n,1));</pre>
                  </td>
                </tr>
              </table>
              <p>A typical situation is that several identical variables are 
				needed, and the most straightforward way to code this is to use 
				a loop.</p>
              <table cellpadding="10" width="100%" id="table67">
                <tr>
                  <td class="xmpcode">
                  <pre>for i = 1:100; X{i} = sdpvar(5,5);end</pre>
                  </td>
                </tr>
              </table>
              <p>However, a much more efficient way to implement this is to use 
				vector valued dimensions (this currently only works if all 
				matrices are symmetric or full)</p>
              <table cellpadding="10" width="100%" id="table68">
                <tr>
                  <td class="xmpcode">
                  <pre>X = sdpvar(5*ones(1,100),5*ones(1,100));</pre>
                  </td>
                </tr>
              </table>
              <p>Another way to create multi-dimensional matrices is to use more 
				than 2 dimension arguments</p>
              <table cellpadding="10" width="100%" id="table141">
                <tr>
                  <td class="xmpcode">
                  <pre>X = sdpvar(5,5,100);</pre>
                  </td>
                </tr>
              </table>
              <p>The benefit with this approach is that this variable can be 
				manipulated as standard 1D and 2D sdpvar objects.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#assign">assign</a>,
              <a href="reference.htm#binvar">binvar</a>,
              <a href="reference.htm#intvar">intvar</a>,
              <a href="reference.htm#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="see">SEE</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>see(x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td><font face="Courier New" size="2">x:</font></td>
                  <td>sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">see is used to print the base matrices of an
              <a href="#sdpvar">sdpvar</a> object.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">A symmetric 2x2 matrix has the following base matrices<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(2,2);
see(x)
<font color="#000000">
Constant matrix
 
     0     0
     0     0</font></pre>
                  <pre><font color="#000000">Base matrices
 
     1     0
     0     0</font></pre>
                  <pre><font color="#000000"> 
     0     1
     1     0</font></pre>
                  <pre><font color="#000000"> 
     0     0
     0     1</font></pre>
                  <pre><font color="#000000"> 
Used variables
 
     1     2     3</font></pre>
                  </td>
                </tr>
              </table>
              <p>When an <a href="reference.htm#sdpvar">sdpvar</a> object is altered, 
              the base matrices change </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre> </pre>
                  <pre>x = sdpvar(1,1);
see(2*x-3)
Constant matrix
 
   <font color="#000000"> -3</font></pre>
                  <pre><font color="#000000">Base matrices
 
     2</font></pre>
                  <pre><font color="#000000"> 
Used variables
 
     4</font></pre>
                  <pre> </pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#getbase">getbase</a>,
              <a href="reference.htm#getbasematrix">getbasematrix</a>,
              <a href="reference.htm#getvariables">getvariables</a>,
              <a href="reference.htm#recover">recover</a>,
              <a href="reference.htm#sdpvar">sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="set">SET</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>F = set(X,&#39;tag&#39;)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>sdpvar or constraint object, or string</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">&#39;tag&#39;:</font></p>
                  </td>
                  <td>char</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">set is used to define the constraints in a problem</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Example</th>
            </tr>
            <tr>
              <td class="tabxpl">To begin with, note that it is possible to create 
              an empty <a href="reference.htm#lmi">set</a> object (this can be useful 
              in some loop-constructs).<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set([]);</pre>
                  </td>
                </tr>
              </table>
              <p>Secondly, do not confuse the <a href="reference.htm#lmi">set</a> 
              object with the standard command set in MATLAB. Yes, it is confusing, 
              but set was the only relevant short word for defining the feasible 
              set that I could come up with...</p>
              <p>Constraining a scalar variable to be larger than 5 is done with
              </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(1,1)
F = set(x &gt; 5)</pre>
                  </td>
                </tr>
              </table>
              <p>The variable <code>F</code> serves as a container for all constraints 
              here. Defining a matrix to be both positive definite and elementwise 
              positive is done with </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = sdpvar(n,n);
F = set(P &gt; 0) + set(P(:) &gt; 0);</pre>
                  </td>
                </tr>
              </table>
              <p>A string-notation can also be used </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(&#39;P &gt; 0&#39;) + set(&#39;P(:) &gt; 0&#39;)</pre>
                  </td>
                </tr>
              </table>
              <p>A <a href="reference.htm#set">set</a> object can be tagged with 
              a description (which can be useful for referencing a particular constraint 
              in, e.g., <a href="reference.htm#dual">dual</a>) </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(P &gt; 0,&#39;positive definite&#39;);
F = F + set(P(:)&gt;0,&#39;positive elements&#39;)</pre>
                  </td>
                </tr>
              </table>
              <p>Second order cone constraints <b><font face="Tahoma">||Ax+b||&lt;c<sup>T</sup>x+d</font></b> 
              can be added with the function <a href="reference.htm#cone">cone</a>
              </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(cone(A*x+b,c&#39;*x+d))</pre>
                  </td>
                </tr>
              </table>
              <p>Equality constraints can also be defined. A constraint that the 
              sum of the vector components is equal to 1 is obtained with </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(sum(x) == 1)</pre>
                  </td>
                </tr>
              </table>
              <p>In general, it should be remembered that YALMIP uses MATLAB standard 
              when it comes to comparison of matrices and scalars. Hence, the following 
              code will constrain all diagonal elements to be larger than 1. </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(diag(P) &gt; 1))</pre>
                  </td>
                </tr>
              </table>
              <p>Double-sided constraints and extensions can easily be defined.</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(2 &gt; diag(P) &gt; 1 &gt; sum(sum(P)))</pre>
                  </td>
                </tr>
              </table>
              <p>It is possible to have complex and integer valued constraints. 
              No special code is necessary. To create a complex-valued integer Hermitian 
              matrix and constrain it to be positive definite, we write </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>P = intvar(3,3,&#39;hermitian&#39;,&#39;complex&#39;);
F = set(P &gt; 0)</pre>
                  </td>
                </tr>
              </table>
              <p>Notice that <a href="reference.htm#lmi">set</a> objects 
              can be referenced </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(P &gt; 0) + set(A&#39;*P+P*A &lt; 0) + set(P(1,1) &gt; 0)+set(P(1,:) &gt; 0);
F_lmi     = F(1:2)
F_element = F(find(is(F,&#39;element-wise&#39;)))</pre>
                  </td>
                </tr>
              </table>
              <p>Finally, note that YALMIP does essentially not distinguish 
				between strict and non-strict inequalities. Hence, the following 
				two constraints are in almost all cases the same.</p>
              <table cellpadding="10" width="100%" id="table123">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(P &gt; 0) + set(trace(P) &lt; 1);
G = set(P &gt;= 0) + set(trace(P) &lt;= 1);</pre>
                  </td>
                </tr>
              </table>
              <p>Please read the <a href="#reallystrict">FAQ</a> for more 
				information on the difference.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#integer">integer</a>,
              <a href="reference.htm#binary">binary</a>,
              <a href="reference.htm#solvesdp">solvesdp</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="setsdpvar">SETSDPVAR</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>assign(X,Y)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">Y:</font></p>
                  </td>
                  <td>double</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">setsdpvar is obsolete. Use <a href="reference.htm#assign">assign</a> 
				instead.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>, <a href="reference.htm#assign">assign</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="solvemp">SOLVEMP</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>[mpsolution,diagnostic] 
              = solvemp(F,h,ops,x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">mpsolution:</font></p>
                  </td>
                  <td>Multiparametric solution</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">diagnostic:</font></p>
                  </td>
                  <td>Output structure</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object describing the constraints. Can be [].</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">h:</font></p>
                  </td>
                  <td>sdpvar-object describing the objective function. Can be [].</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">ops:</font></p>
                  </td>
                  <td>options structure from sdpsettings. Can be [].</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">x</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>parametric variables.</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">solvemp is used for solving multiparametric problems.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">solvemp is used in the same way as
              <a href="#solvesdp">solvesdp</a>, the only difference being the fourth 
              additional argument to define the parametric variables. See the
              <a href="mp.htm">multiparametric example</a> for details.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#set">set</a>,
              <a href="reference.htm#sdpsettings">sdpsettings</a>,
              <a href="reference.htm#solvemoment">solvemoment</a>,
              <a href="#solvesdp">solvesdp</a>, <a href="reference.htm#solvesos">
              solvesos</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="solvemoment">SOLVEMOMENT</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>[sol,xoptimal,momentdata,sos] = solvemoment(F,h,options,d)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">sol:</font></p>
                  </td>
                  <td>diagnostics structure from solvesdp</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object describing the constraints</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">xoptimal</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>Extracted global solutions</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">momentdata</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>Moment matrices etc.</td>
                </tr>
                <tr>
                  <td>
                   <p align="right"><font face="Courier New">sos</font><font face="Courier New" size="2">:</font></p>
</td>
                  <td>Associated sum-of-squares decompositions</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">h:</font></p>
                  </td>
                  <td>sdpvar object describing objective</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">options:</font></p>
                  </td>
                  <td>structure from sdpsettings</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">d:</font></p>
                  </td>
                  <td>integer&gt;0</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">solvemoment computes lower bounds to polynomial 
              programs using Lasserre&#39;s moment-method.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">The command is used for finding lower bounds on 
              a polynomial h(x), subject to constraints F(x), where F(x) is a collection 
              of polynomial inequalities. The following example is taken from [?].<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x1 = sdpvar(1,1);x2 = sdpvar(1,1);x3 = sdpvar(1,1);
h = -2*x1+x2-x3;
F = set(x1*(4*x1-4*x2+4*x3-20)+x2*(2*x2-2*x3+9)+x3*(2*x3-13)+24&gt;0)
F = F + set(4-(x1+x2+x3)&gt;0);
F = F + set(6-(3*x2+x3)&gt;0);
F = F + set(2-x1&gt;0);
F = F + set(3-x3&gt;0);
F = F + set(x1&gt;0);
F = F + set(x2&gt;0);
F = F + set(x3&gt;0);
solvemoment(F,h);
<font color="#000000">double(h)
ans =</font></pre>
                  <pre><font color="#000000">   -6.0000</font></pre>
                  </td>
                </tr>
              </table>
              <p>In the code above, we solved the problem with the lowest possible 
              lifting (decided by YALMIP), and the lower bound turned out to be 
              -6. A higher order relaxation gives better bounds. </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvemoment(F,h,[],2);
double(h)
<font color="#000000">ans =</font></pre>
                  <pre><font color="#000000">   -5.69</font>
</pre>
                  <pre>solvemoment(F,h,[],3);
double(h)
<font color="#000000">ans =</font></pre>
                  <pre><font color="#000000">   -4.0685</font>
</pre>
                  <pre>solvemoment(F,h,[],4);
double(h)
<font color="#000000">ans =</font></pre>
                  <pre><font color="#000000">   -4.0000</font></pre>
                  <pre> </pre>
                  <pre> </pre>
                  </td>
                </tr>
              </table>
              <p>For a more complete introduction, please study the extensive
              <a href="moment.htm">examples</a>.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#solvesdp">solvesdp</a>,
              <a href="reference.htm#solvesos">solvesos</a>,
              <a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#set">set</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="solvesdp">SOLVESDP</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>diagnostics 
              = solvesdp(F,h,ops)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">diagnostic:</font></p>
                  </td>
                  <td>Output structure</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object describing the constraints. Can be [].</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">h:</font></p>
                  </td>
                  <td>sdpvar-object describing the objective function. Can be [].</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">ops:</font></p>
                  </td>
                  <td>options structure from sdpsettings. Can be [].</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">solvesdp is the common function for solving all 
              optimization problems.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">A linear program <font face="Tahoma"><b>{min c&#39;x
              </b>subject to<b> Ax&lt;= b}</b></font> can be solved with the following 
              piece of code<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(length(c),1);
F = set(A*x&lt;b)
solvesdp(F,c&#39;*x);</pre>
                  </td>
                </tr>
              </table>
              <p>If we only look for a feasible solution, we can omit the objective 
              function </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F);</pre>
                  </td>
                </tr>
              </table>
              <p>Solving the feasibility problem with the solver
              <a href="solvers.htm#quadprog">QUADPROG</a> can be done with </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F,[],sdpsettings(&#39;solver&#39;,&#39;quadprog&#39;));</pre>
                  </td>
                </tr>
              </table>
              <p>Minimizing an objective function is done by passiing a second argument</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>solvesdp(F,sum(x));</pre>
                  </td>
                </tr>
              </table>
              <p>For more examples, run <a href="reference.htm#yalmipdemo">yalmipdemo</a> 
              and check out all the
              <a target="contents" href="mnl_cnt_examples.htm">examples</a>.</p>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#set">set</a>,
              <a href="reference.htm#logdet">logdet</a>,
              <a href="reference.htm#sdpsettings">sdpsettings</a>,
              <a href="reference.htm#solvemoment">solvemoment</a>,
              <a href="reference.htm#solvemp">solvemp</a>,
              <a href="reference.htm#solvesos">solvesos</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="solvesos">SOLVESOS</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax<p>&nbsp;</p>
              </th>
              <td class="code" valign="top" nowrap width="100%"><code>[sol,m,B] 
              = solvesos(F,h,options,params)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">sol:</font></p>
                  </td>
                  <td>diagnostics structure from solvesdp</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">m:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">B:</font></p>
                  </td>
                  <td>cell with double</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object (Constraints on parametric variables and SOS constraints)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">h:</font></p>
                  </td>
                  <td>sdpvar object (Objective function)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">options:</font></p>
                  </td>
                  <td>structure from sdpsettings</td>
                </tr>
                <tr>
                  <td><font face="Courier New" size="2">params:</font></td>
                  <td>sdpvar object (The parametric variables)</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">solvesos calculates SOS (sum-of-squares) decompositions.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">In its most simple form,
              <a href="reference.htm#solvesos">solvesos</a> takes a SOS constrained 
              polynomial and calculates the SOS decomposition.<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(1,1);
p = x^4+x+5;
F = set(sos(p)); % Constrain p to be a SOS
solvesos(F);</pre>
                  </td>
                </tr>
              </table>
              <p>The SOS-decompositions should give <strong>p(x)=v(x)<sup>T</sup>v(x)</strong>
              </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>v = sosd(F);
sdisplay(p-v&#39;*v)
<font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;-1.7764e-015+7.7716e-016x-1.1102e-015x^4&#39;</font></pre>
                  </td>
                </tr>
              </table>
              <p>Obviously, not entirely true. However the coefficients are small 
              and most likely due to numerical inaccuracy. Remove all terms with 
              coeffients smaller than 1e-6 using the command
              <a href="reference.htm#clean">clean</a> </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>sdisplay(clean(p-v&#39;*v,1e-6))
<font color="#000000">ans = 
    &#39;0&#39;</font></pre>
                  </td>
                </tr>
              </table>
              <p>Parameterized SOS problems&nbsp; are also possible. As an example, 
              a lower bound on the global minimum of <b><font face="Tahoma">p</font></b> 
              is obtained by finding a SOS decomposition of <b>
              <font face="Tahoma">p-t</font></b>, while maximizing <b>
              <font face="Tahoma">t</font></b>. The full syntax is </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>t = sdpvar(1,1);
F = set(sos(p-t));
solvesos(F,-t,[],t);
double(t)
<font color="#000000">ans =</font></pre>
                  <pre><font color="#000000">    4.5275</font></pre>
                  </td>
                </tr>
              </table>
              <p>Parametric variables (the last argument in the code above) are 
              automatically detected if they are part of the objective function 
              or part of non-SOS constraints. Hence, the problem above can be simplified.</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>t = sdpvar(1,1);
F = set(sos(p-t));
solvesos(F,-t);
double(t)
<font color="#000000">ans =</font></pre>
                  <pre><font color="#000000">    4.5275</font></pre>
                  </td>
                </tr>
              </table>
              <p>For more examples, run <a href="reference.htm#yalmipdemo">yalmipdemo</a> 
              and check out the <a target="contents" href="mnl_cnt_examples.htm">
              examples</a> in this manual.</p>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#solvesdp">solvesdp</a>,
              <a href="reference.htm#solvemoment">solvemoment</a>,
              <a href="reference.htm#sdisplay">sdisplay</a>,
              <a href="reference.htm#clean">clean</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="sos">SOS</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>s = sos(p)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right">s:</p>
                  </td>
                  <td>sdpvar object (only useful in <a href="reference.htm#lmi">
                  set</a>)</td>
                </tr>
                <tr>
                  <td>
                  <p align="right">p:</p>
                  </td>
                  <td>polynomial scalar sdpvar object</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">sos is used to define sum-of-squares (SOS) constraints</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Solving a simple SOS problem and extracting the 
              decomposition is done as<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(1,1);
p = x^8+x^7+1;
F = set(sos(p));
solvesos(F);
sdisplay(sosd(F))</pre>
                  <pre><font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;0.12828-0.062411x+0.12427x^2-0.49555x^3-0.99602x^4&#39;
    &#39;0.99174+0.008073x-0.018071x^2+0.072068x^3+0.089115x^4&#39;</font></pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#solvesos">solvesos</a>,
              <a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#sosd">sosd</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="sosd">SOSD</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>v = sosd(F)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">v:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">F:</font></p>
                  </td>
                  <td>set object with a <a href="reference.htm#sos">sos</a> constraint</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">sosd is used to extract the SOS decomposition from 
              a sum-of-squares (SOS) constraint.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Solving a simple SOS problem and extracting the 
              decomposition is done as<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sdpvar(1,1);
p = x^8+x^7+1;
F = set(sos(p));
solvesos(F);
sdisplay(sosd(F))</pre>
                  <pre><font color="#000000">ans = </font></pre>
                  <pre><font color="#000000">    &#39;0.12828-0.062411x+0.12427x^2-0.49555x^3-0.99602x^4&#39;
    &#39;0.99174+0.008073x-0.018071x^2+0.072068x^3+0.089115x^4&#39;</font></pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#solvesos">solvesos</a>,
              <a href="reference.htm#sdpvar">sdpvar</a>,
              <a href="reference.htm#sos">sos</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="sparse">SPARSE</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>x = sparse(i,j,s,n,m)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">x:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">i</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>double </td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">j</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>double</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">s</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New">n</font><font face="Courier New" size="2">:</font></p>
                  </td>
                  <td>sdpvar object</td>
                </tr>
                <tr>
                  <td><font face="Courier New">m:</font></td>
                  <td>double</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">sparse is used to create <font color="#0000ff">
              <a href="reference.htm#sdpvar">
              sdpvar</a> </font>objects&nbsp; with a certain structure.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Creating a diagonal matrix with every second diagonal 
              element zero can be done as<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>x = sparse(1:2:2*n,1:2:2*n,sdpvar(n,1))</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpvar">
              sdpvar</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933" id="table60">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="unblkdiag">UNBLKDIAG</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0" id="table61">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>F = 
				unblkdiag(X)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0" style="border-collapse: collapse" bordercolor="#111111" cellpadding="0" cellspacing="0" id="table62">
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">F:</font></p>
                  </td>
                  <td>set object or cell with sdpvar objects</td>
                </tr>
                <tr>
                  <td>
                  <p align="right"><font face="Courier New" size="2">X:</font></p>
                  </td>
                  <td>set object </td>
                </tr>
                </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">unblkdiag is used to detect and extract block 
				diagonal terms.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">Create a block diagonal matrix<table cellpadding="10" width="100%" id="table63">
                <tr>
                  <td class="xmpcode">
                  <pre>A = sdpvar(2,2);
B = sdpvar(3,3);
C = diag(sdpvar(3,1));
X = blkdiag(A,B,C);</pre>
                  </td>
                </tr>
              </table>
              <p>Now destroy the block diagonal structure</p>
				<table cellpadding="10" width="100%" id="table64">
                <tr>
                  <td class="xmpcode">
                  <pre>p = randperm(8);
X = X(p,p);
spy(X)</pre>
                  </td>
                </tr>
              </table>
              <p>The blocks are easily recovered (note that scalar terms are 
				returned one by one)</p>
				<table cellpadding="10" width="100%" id="table65">
                <tr>
                  <td class="xmpcode">
                  <pre>blocks = unblkdiag(X)
  [3x3 sdpvar]  [1x1 sdpvar]  [2x2 sdpvar]  [1x1 sdpvar]  [1x1 sdpvar]</pre>
                  </td>
                </tr>
              </table>
              <p>The command is most efficiently used on 
              <a href="reference.htm#set">
              set</a> objects (the function will go through all 
				constraints in the <a href="reference.htm#set">
              set</a> object and try to detect blocked terms)</p>
				<table cellpadding="10" width="100%" id="table66">
                <tr>
                  <td class="xmpcode">
                  <pre>F = set(X);
F = unblkdiag(F)
+++++++++++++++++++++++++++++++++++++++++++++++++
|   ID|      Constraint|                    Type|
+++++++++++++++++++++++++++++++++++++++++++++++++
|   #1|   Numeric value|   Matrix inequality 3x3|
|   #2|   Numeric value|   Matrix inequality 2x2|
|   #3|   Numeric value|        Element-wise 3x1|
+++++++++++++++++++++++++++++++++++++++++++++++++</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl">              <a href="reference.htm#sdpvar">
              sdpvar</a>,              <a href="reference.htm#dissect">
              dissect</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="yalmip">YALMIP</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>yalmip(command)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td><font face="Courier New">command</font><font face="Courier New" size="2">:</font></td>
                  <td>char {&#39;clear&#39;,&#39;info&#39;,&#39;version&#39;}</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">yalmip can be used to perform some adminstrative 
              stuff.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">To clear the internals of YALMIP<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>yalmip(&#39;clear&#39;)</pre>
                  </td>
                </tr>
              </table>
              <p>Version number and release-date can be obtained</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>[vernum,reldate] = yalmip(&#39;version&#39;);</pre>
                  </td>
                </tr>
              </table>
              <p>Additional information can be displayed using the &#39;info&#39; tag</p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>ver = yalmip(&#39;info&#39;)
<font color="#000000">**********************************
- - - - YALMIP 3 - - - - - - - - -
**********************************

Variable Size
No SDPVAR objects found

SET
No SET objects found</font>
</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpsettings">sdpsettings</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="yalmipdemo">YALMIPDEMO</font></a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">&nbsp;</th>
              <td class="code" valign="top" nowrap width="100%"><code>yalmipdemo</code></td>
            </tr>
            <tr>
              <td class="tabxpl">&nbsp;</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">yalmipdemo runs a set of tutorial problems</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">To start the tutorial<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>yalmipdemo</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="#yalmiptest">yalmiptest</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="yalmiperror">YALMIPERROR</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>yalmiperror(x)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td><font face="Courier New" size="2">x:</font></td>
                  <td>double</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">yalmiperror returns the error-text for a error-code.</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">To se all available error codes,<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>yalmiperror

 <font color="#000000"> Error codes
 
  -5 License problems in solver
  -4 Solver not applicable
  -3 Solver not found 
  -2 No suitable solver
  -1 Unknown error
   0 No problems detected
   1 Infeasible problem
   2 Unbounded objective function
   3 Maximum iterations exceeded
   4 Numerical problems
   5 Lack of progress
   6 Initial solution infeasible
   7 YALMIP sent incorrect input to solver
   8 Feasibility cannot be determined
   9 Unknown problem in solver
  10 bigM failed (increase sp.Mfactor)  
  11 Other identified error
  12 Infeasible or unbounded
  13 YALMIP cannot determine status in solver</font></pre>
                  </td>
                </tr>
              </table>
              <p>To see a particular error message, </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>yalmiperror(3)
<font color="#000000"> ans =</font></pre>
                  <pre><font color="#000000"> Maximum iterations exceeded</font> </pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#solvesdp">solvesdp</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" width="100%" bordercolor="#FF9933">
        <tr>
          <td class="tableheader">
          <p class="tableheader"><a name="yalmiptest">YALMIPTEST</a></p>
          </td>
        </tr>
        <tr>
          <td>
          <table cellspacing="0" cellpadding="4" width="100%" border="0">
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Syntax</th>
              <td class="code" valign="top" nowrap width="100%"><code>yalmiptest(ops)</code></td>
            </tr>
            <tr>
              <td class="tabxpl">
              <table border="0">
                <tr>
                  <td><font face="Courier New" size="2">ops:</font></td>
                  <td>sdpsettings structure</td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Description</th>
            </tr>
            <tr>
              <td class="tabxpl">yalmiptest runs a set of test examples to test 
              the installation</td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Examples</th>
            </tr>
            <tr>
              <td class="tabxpl">To test the default installation<table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>yalmiptest</pre>
                  </td>
                </tr>
              </table>
              <p>To test a particular solver </p>
              <table cellpadding="10" width="100%">
                <tr>
                  <td class="xmpcode">
                  <pre>yalmiptest(sdpsettings(&#39;solver&#39;,&#39;sdpt3&#39;))</pre>
                  </td>
                </tr>
              </table>
              </td>
            </tr>
            <tr>
              <th class="doc" valign="top" nowrap align="left" bgcolor="#eeeeee" rowspan="2">
              Related commands</th>
            </tr>
            <tr>
              <td class="tabxpl"><a href="reference.htm#sdpsettings">sdpsettings</a></td>
            </tr>
          </table>
          </td>
        </tr>
      </table>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      <p>&nbsp;</p>
      </td>
    </tr>
  </table>
</div>

</body>

</html>
